{
  "openapi": "3.1.0",
  "info": {
    "title": "Prompt Management API",
    "description": "API for managing and retrieving prompt configurations with deployment and workspace information",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.llmide.app",
      "description": "Production API server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/prompts": {
      "get": {
        "summary": "Get prompt by deployment ID",
        "description": "Retrieves the current active version's prompt metadata (title, description, LLM configuration, and message list) by deployment ID, along with associated deployment and workspace information",
        "operationId": "getPromptByDeployId",
        "tags": ["Prompts"],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.llmide.app/v1/prompts?deployId=dep_12345\" \\\n  -H \"Authorization: Bearer sk_live_xxx\""
          },
          {
            "lang": "python",
            "source": "import requests\n\nheaders = {\n    'Authorization': 'Bearer sk_live_xxx'\n}\n\nparams = {\n    'deployId': 'dep_12345'\n}\n\nresponse = requests.get('https://api.llmide.app/v1/prompts', headers=headers, params=params)\nprint(response.json())"
          },
          {
            "lang": "javascript",
            "source": "const response = await fetch('https://api.llmide.app/v1/prompts?deployId=dep_12345', {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer sk_live_xxx'\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "deployId",
            "in": "query",
            "description": "The deployment ID to retrieve. Must belong to the current API key's workspace and be in active state",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dep_12345"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with prompt data",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The rate limit ceiling for the workspace",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Used": {
                "description": "The number of requests used in the current rate limit window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time when the rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid deployId parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing, invalid, or expired authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found - deploy not found, inactive, or not accessible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded - monthly quota exhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Submit diagnosis data",
        "description": "Submits external diagnosis session data (including input/output, timing, and additional fields) to the backend diagnosis table and generates API call logs",
        "operationId": "submitDiagnosisData",
        "tags": ["Diagnosis"],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \"https://api.llmide.app/v1/diagnosis?deployId=dep_12345\" \\\n  -H \"Authorization: Bearer sk_live_xxx\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sessionId\": \"sess_789\",\n    \"status\": 0,\n    \"content\": {\n      \"input\": \"Prompt variables: {...}\",\n      \"output\": \"LLM reply content\"\n    },\n    \"latency\": 2450,\n    \"startAt\": 1720780800000,\n    \"endAt\": 1720780802450,\n    \"additional_properties\": {\n      \"trace_id\": \"trc_abc\",\n      \"token_usage\": { \"prompt_tokens\": 200, \"completion_tokens\": 150 }\n    }\n  }'"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nheaders = {\n    'Authorization': 'Bearer sk_live_xxx',\n    'Content-Type': 'application/json'\n}\n\nparams = {\n    'deployId': 'dep_12345'\n}\n\ndata = {\n    'sessionId': 'sess_789',\n    'status': 0,\n    'content': {\n        'input': 'Prompt variables: {...}',\n        'output': 'LLM reply content'\n    },\n    'latency': 2450,\n    'startAt': 1720780800000,\n    'endAt': 1720780802450,\n    'additional_properties': {\n        'trace_id': 'trc_abc',\n        'token_usage': {'prompt_tokens': 200, 'completion_tokens': 150}\n    }\n}\n\nresponse = requests.post(\n    'https://api.llmide.app/v1/diagnosis',\n    headers=headers,\n    params=params,\n    data=json.dumps(data)\n)\nprint(response.json())"
          },
          {
            "lang": "javascript",
            "source": "const response = await fetch('https://api.llmide.app/v1/diagnosis?deployId=dep_12345', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer sk_live_xxx',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    sessionId: 'sess_789',\n    status: 0,\n    content: {\n      input: 'Prompt variables: {...}',\n      output: 'LLM reply content'\n    },\n    latency: 2450,\n    startAt: 1720780800000,\n    endAt: 1720780802450,\n    additional_properties: {\n      trace_id: 'trc_abc',\n      token_usage: { prompt_tokens: 200, completion_tokens: 150 }\n    }\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "deployId",
            "in": "query",
            "description": "The target deployment ID. Must belong to the current API key's workspace and be in active state",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dep_12345"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Diagnosis session data to be recorded",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagnosisRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diagnosis data recorded successfully",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The rate limit ceiling for the workspace",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Used": {
                "description": "The number of requests used in the current rate limit window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time when the rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields, invalid deployId, empty content, or invalid timestamp format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing, invalid, or expired authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found - deploy not found, inactive, or not accessible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded - monthly quota exhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PromptResponse": {
        "type": "object",
        "required": [
          "id",
          "title",
          "messages",
          "deploy",
          "workspace"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Prompt ID",
            "example": "prompt_abc123"
          },
          "title": {
            "type": "string",
            "description": "Current version title",
            "example": "Welcome Flow"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Current version description",
            "example": "Greeting flow for new sign-ups"
          },
          "llmConfig": {
            "type": "object",
            "nullable": true,
            "description": "Custom LLM configuration JSON",
            "example": {
              "provider": "openai",
              "model": "gpt-4o",
              "temperature": 0.4
            }
          },
          "messages": {
            "type": "array",
            "description": "Prompt message sequence with role and content fields",
            "items": {
              "$ref": "#/components/schemas/PromptMessage"
            }
          },
          "deploy": {
            "$ref": "#/components/schemas/DeployInfo"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceInfo"
          }
        }
      },
      "PromptMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Message role",
            "example": "system"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "You are a helpful assistant."
          }
        }
      },
      "DeployInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "currentVersion",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Deploy ID",
            "example": "dep_12345"
          },
          "name": {
            "type": "string",
            "description": "Deploy name",
            "example": "Production"
          },
          "currentVersion": {
            "type": "integer",
            "description": "Current version number",
            "example": 7
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the deployment is active",
            "example": true
          }
        }
      },
      "WorkspaceInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Workspace ID",
            "example": "ws_67890"
          },
          "name": {
            "type": "string",
            "description": "Workspace name",
            "example": "Acme Inc."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "examples": [
              "Missing or invalid deployId parameter",
              "Missing or invalid authorization header",
              "No API key provided",
              "Invalid API key",
              "Deploy not found or not accessible",
              "Internal server error"
            ]
          }
        }
      },
      "RateLimitErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "details"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Rate limit error message",
            "example": "Rate limit exceeded"
          },
          "details": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "Monthly rate limit"
              },
              "used": {
                "type": "integer",
                "description": "Requests used this month"
              },
              "resetTime": {
                "type": "integer",
                "description": "Unix timestamp when the limit resets"
              },
              "upgradeUrl": {
                "type": "string",
                "nullable": true,
                "description": "Optional upgrade link"
              }
            }
          }
        }
      },
      "DiagnosisRequest": {
        "type": "object",
        "required": [
          "sessionId",
          "status",
          "content"
        ],
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "External diagnosis session identifier",
            "example": "sess_789"
          },
          "status": {
            "type": "integer",
            "description": "Business-defined status code, stored as integer",
            "example": 0
          },
          "content": {
            "$ref": "#/components/schemas/DiagnosisContent"
          },
          "latency": {
            "type": "number",
            "description": "Call latency in milliseconds",
            "minimum": 0,
            "example": 2450
          },
          "startAt": {
            "type": "integer",
            "description": "Session start time, UNIX millisecond timestamp, must be non-negative",
            "minimum": 0,
            "example": 1720780800000
          },
          "endAt": {
            "type": "integer",
            "description": "Session end time, UNIX millisecond timestamp, must be non-negative",
            "minimum": 0,
            "example": 1720780802450
          },
          "additional_properties": {
            "type": "object",
            "description": "Arbitrary JSON structure for additional information, stored as-is",
            "example": {
              "trace_id": "trc_abc",
              "token_usage": {
                "prompt_tokens": 200,
                "completion_tokens": 150
              }
            },
            "additionalProperties": true
          }
        }
      },
      "DiagnosisContent": {
        "type": "object",
        "description": "Session input/output content. At least one of input or output must be provided",
        "properties": {
          "input": {
            "type": "string",
            "description": "Session input text",
            "example": "Prompt variables: {...}"
          },
          "output": {
            "type": "string",
            "description": "Session output text",
            "example": "LLM reply content"
          }
        },
        "anyOf": [
          {
            "required": ["input"]
          },
          {
            "required": ["output"]
          }
        ]
      },
      "DiagnosisResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Newly created diagnosis record ID",
            "example": "diag_abc123"
          },
          "status": {
            "type": "string",
            "description": "Fixed value 'success'",
            "enum": ["success"],
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Diagnosis data recorded successfully"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}